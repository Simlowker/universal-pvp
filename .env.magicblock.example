# MagicBlock Environment Configuration Template
# Copy this file to .env.magicblock and configure with your values

# ==============================================================================
# CORE CONFIGURATION
# ==============================================================================

# Environment (staging, production)
MAGICBLOCK_ENVIRONMENT=staging

# Network Configuration
MAGICBLOCK_NETWORK=testnet
MAGICBLOCK_CLUSTER=testnet

# Server Configuration
MAGICBLOCK_HOST=0.0.0.0
MAGICBLOCK_PORT=8080
MAGICBLOCK_RPC_PORT=8899
MAGICBLOCK_WEBSOCKET_PORT=8900
MAGICBLOCK_METRICS_PORT=9090

# ==============================================================================
# SOLANA CONFIGURATION
# ==============================================================================

# Solana RPC URLs
SOLANA_RPC_URL=https://api.testnet.solana.com
SOLANA_WS_URL=wss://api.testnet.solana.com
SOLANA_COMMITMENT_LEVEL=confirmed

# Solana Validator Configuration
VALIDATOR_IDENTITY_KEYPAIR_PATH=/app/config/validator-keypair.json
VALIDATOR_VOTE_KEYPAIR_PATH=/app/config/vote-keypair.json

# ==============================================================================
# EPHEMERAL ROLLUP CONFIGURATION
# ==============================================================================

# Rollup Settings
EPHEMERAL_ROLLUP_ENABLED=true
EPHEMERAL_ROLLUP_BLOCK_TIME_MS=400
EPHEMERAL_ROLLUP_MAX_TXN_PER_BLOCK=1000
EPHEMERAL_ROLLUP_BATCH_SIZE=100

# State Management
STATE_COMPRESSION_ENABLED=true
STATE_MERKLE_TREE_HEIGHT=20
STATE_CANOPY_DEPTH=10

# ==============================================================================
# DATABASE CONFIGURATION
# ==============================================================================

# Primary Database
DATABASE_URL=postgresql://magicblock:password@postgres:5432/magicblock_db
DATABASE_MAX_CONNECTIONS=20
DATABASE_MIN_CONNECTIONS=5
DATABASE_CONNECTION_TIMEOUT=30
DATABASE_IDLE_TIMEOUT=600

# Redis Configuration (for caching and session management)
REDIS_URL=redis://redis:6379/0
REDIS_MAX_CONNECTIONS=10
REDIS_CONNECTION_TIMEOUT=5

# ==============================================================================
# SECURITY CONFIGURATION
# ==============================================================================

# JWT Configuration
JWT_SECRET=your-super-secret-jwt-key-change-this-in-production
JWT_EXPIRATION=3600
JWT_REFRESH_EXPIRATION=86400

# API Keys and Authentication
API_KEY_HEADER=X-API-Key
ADMIN_API_KEY=your-admin-api-key-change-this
RATE_LIMIT_WINDOW_MS=900000
RATE_LIMIT_MAX_REQUESTS=100

# CORS Configuration
CORS_ENABLED=true
CORS_ALLOWED_ORIGINS=*
CORS_ALLOWED_METHODS=GET,POST,PUT,DELETE,OPTIONS
CORS_ALLOWED_HEADERS=Content-Type,Authorization,X-API-Key

# ==============================================================================
# PERFORMANCE CONFIGURATION
# ==============================================================================

# Connection Management
MAX_CONCURRENT_CONNECTIONS=1000
CONNECTION_TIMEOUT_SECONDS=30
KEEP_ALIVE_TIMEOUT_SECONDS=60
REQUEST_TIMEOUT_SECONDS=30

# Cache Configuration
CACHE_ENABLED=true
CACHE_TTL_SECONDS=300
CACHE_MAX_SIZE=1000

# Worker Thread Configuration
WORKER_THREADS=4
MAX_BLOCKING_THREADS=50

# ==============================================================================
# MONITORING & OBSERVABILITY
# ==============================================================================

# Logging Configuration
RUST_LOG=info,magicblock=debug
LOG_FORMAT=json
LOG_LEVEL=info
LOG_FILE_PATH=/app/logs/magicblock.log
LOG_MAX_FILE_SIZE=100MB
LOG_MAX_FILES=10

# Metrics and Telemetry
METRICS_ENABLED=true
METRICS_ENDPOINT=/metrics
TRACING_ENABLED=true
JAEGER_ENDPOINT=http://jaeger:14268/api/traces

# Health Check Configuration
HEALTH_CHECK_INTERVAL_SECONDS=30
HEALTH_CHECK_TIMEOUT_SECONDS=10

# ==============================================================================
# AWS CONFIGURATION (for production deployments)
# ==============================================================================

# AWS Credentials (prefer IAM roles in production)
AWS_REGION=us-west-2
AWS_ACCESS_KEY_ID=your-aws-access-key
AWS_SECRET_ACCESS_KEY=your-aws-secret-key

# S3 Configuration (for backups and data storage)
S3_BUCKET_NAME=magicblock-backups
S3_REGION=us-west-2

# CloudWatch Configuration
CLOUDWATCH_LOG_GROUP=/aws/magicblock/application
CLOUDWATCH_LOG_STREAM=magicblock-logs

# ==============================================================================
# KUBERNETES CONFIGURATION
# ==============================================================================

# Pod Configuration
POD_NAME=magicblock-bolt-pod
NODE_NAME=magicblock-node
NAMESPACE=staging

# Service Discovery
SERVICE_NAME=magicblock-bolt-service
SERVICE_PORT=80

# ==============================================================================
# FEATURE FLAGS
# ==============================================================================

# Feature Toggles
FEATURE_METRICS_COLLECTION=true
FEATURE_TRANSACTION_BATCHING=true
FEATURE_ACCOUNT_COMPRESSION=true
FEATURE_PROGRAM_DEPLOY=true
FEATURE_WEBSOCKET_STREAMING=true
FEATURE_PRIORITY_FEES=true

# Experimental Features
EXPERIMENTAL_PARALLEL_PROCESSING=false
EXPERIMENTAL_ADVANCED_CACHING=false
EXPERIMENTAL_ML_PREDICTION=false

# ==============================================================================
# COST OPTIMIZATION
# ==============================================================================

# Resource Limits
CPU_LIMIT_CORES=2.0
MEMORY_LIMIT_GB=4.0
DISK_LIMIT_GB=100.0

# Auto-scaling Configuration
AUTOSCALE_MIN_REPLICAS=2
AUTOSCALE_MAX_REPLICAS=10
AUTOSCALE_TARGET_CPU_PERCENT=70
AUTOSCALE_TARGET_MEMORY_PERCENT=80

# Cost Tracking
COST_CENTER=blockchain-infrastructure
BILLING_TAG_ENVIRONMENT=staging
BILLING_TAG_PROJECT=magicblock

# ==============================================================================
# ALERTS AND NOTIFICATIONS
# ==============================================================================

# Slack Configuration
SLACK_WEBHOOK_URL=https://hooks.slack.com/services/your/webhook/url
SLACK_CHANNEL=#alerts
SLACK_USERNAME=MagicBlock-Bot

# Email Configuration
SMTP_HOST=smtp.gmail.com
SMTP_PORT=587
SMTP_USER=alerts@magicblock.gg
SMTP_PASSWORD=your-email-password
ALERT_EMAIL_RECIPIENTS=devops@magicblock.gg,team@magicblock.gg

# PagerDuty Configuration
PAGERDUTY_INTEGRATION_KEY=your-pagerduty-integration-key
PAGERDUTY_SEVERITY_THRESHOLD=error

# ==============================================================================
# BACKUP AND DISASTER RECOVERY
# ==============================================================================

# Backup Configuration
BACKUP_ENABLED=true
BACKUP_INTERVAL_HOURS=6
BACKUP_RETENTION_DAYS=30
BACKUP_STORAGE_TYPE=s3
BACKUP_ENCRYPTION_ENABLED=true

# Disaster Recovery
DR_ENABLED=true
DR_REGION=us-east-1
DR_RTO_MINUTES=60
DR_RPO_MINUTES=15

# ==============================================================================
# DEVELOPMENT AND TESTING
# ==============================================================================

# Development Mode
DEVELOPMENT_MODE=false
DEBUG_MODE=false
MOCK_EXTERNAL_SERVICES=false

# Testing Configuration
TEST_DATABASE_URL=postgresql://test:test@localhost:5433/magicblock_test
TEST_SOLANA_RPC_URL=http://localhost:8899
TEST_TIMEOUT_SECONDS=30

# ==============================================================================
# CUSTOM EXTENSIONS
# ==============================================================================

# Plugin Configuration
PLUGINS_ENABLED=true
PLUGIN_DIRECTORY=/app/plugins
PLUGIN_CONFIG_PATH=/app/config/plugins.toml

# Custom Metrics
CUSTOM_METRICS_ENABLED=true
CUSTOM_METRICS_NAMESPACE=magicblock.custom

# Integration Endpoints
WEBHOOK_ENDPOINTS=http://localhost:3000/webhooks
EXTERNAL_API_ENDPOINTS=https://api.external-service.com

# ==============================================================================
# NOTES
# ==============================================================================

# Production Checklist:
# 1. Change all default passwords and keys
# 2. Use environment-specific values for database URLs
# 3. Configure proper SSL/TLS certificates
# 4. Set up proper monitoring and alerting
# 5. Configure backup and disaster recovery
# 6. Review and adjust resource limits
# 7. Set up proper logging and log rotation
# 8. Configure network policies and firewalls
# 9. Set up proper access controls and authentication
# 10. Test disaster recovery procedures

# Security Best Practices:
# - Never commit this file with real credentials to version control
# - Use secrets management systems (AWS Secrets Manager, HashiCorp Vault, etc.)
# - Rotate credentials regularly
# - Use principle of least privilege for all access
# - Monitor for unusual activity and unauthorized access
# - Keep all dependencies updated

# Performance Optimization:
# - Monitor resource usage and adjust limits accordingly
# - Use connection pooling for database connections
# - Implement proper caching strategies
# - Monitor and optimize SQL queries
# - Use CDN for static assets
# - Implement proper load balancing

# Maintenance:
# - Regular security updates
# - Database maintenance and optimization
# - Log cleanup and rotation
# - Backup verification and testing
# - Performance monitoring and optimization
# - Capacity planning and scaling