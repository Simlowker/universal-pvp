name: Deploy Pipeline

on:
  workflow_run:
    workflows: ["CI Pipeline"]
    types:
      - completed
    branches: [ main, develop ]
  
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod
      version:
        description: 'Version to deploy'
        required: false
        type: string

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  deploy-dev:
    if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'dev')
    runs-on: ubuntu-latest
    environment: dev
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts-${{ github.run_number }}
          
      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'
          
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2
          
      - name: Login to ECR
        run: aws ecr get-login-password --region us-west-2 | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-west-2.amazonaws.com
        
      - name: Load and push Docker images
        run: |
          VERSION=${{ github.run_number }}
          
          # Load images
          docker load < frontend-${VERSION}.tar.gz
          docker load < api-${VERSION}.tar.gz
          
          # Tag for ECR
          docker tag sol-duel-frontend:${VERSION} ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-west-2.amazonaws.com/sol-duel-frontend:${VERSION}
          docker tag sol-duel-api:${VERSION} ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-west-2.amazonaws.com/sol-duel-api:${VERSION}
          
          # Push to ECR
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-west-2.amazonaws.com/sol-duel-frontend:${VERSION}
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-west-2.amazonaws.com/sol-duel-api:${VERSION}
          
      - name: Update EKS kubeconfig
        run: aws eks update-kubeconfig --region us-west-2 --name sol-duel-dev
        
      - name: Deploy to Kubernetes
        run: |
          VERSION=${{ github.run_number }}
          
          # Update image tags in manifests
          sed -i "s|{{VERSION}}|${VERSION}|g" deployment/kubernetes/dev/*.yml
          
          # Apply manifests
          kubectl apply -f deployment/kubernetes/dev/
          
          # Wait for rollout
          kubectl rollout status deployment/frontend-deployment -n sol-duel-dev --timeout=300s
          kubectl rollout status deployment/api-deployment -n sol-duel-dev --timeout=300s
          
      - name: Deploy Solana programs
        run: |
          # Install Solana CLI
          sh -c "$(curl -sSfL https://release.solana.com/v1.17.0/install)"
          export PATH="$HOME/.local/share/solana/install/active_release/bin:$PATH"
          
          # Set to devnet
          solana config set --url https://api.devnet.solana.com
          solana config set --keypair <(echo "${{ secrets.SOLANA_DEPLOYER_KEY }}" | base64 -d)
          
          # Deploy programs
          solana program deploy target/deploy/sol_duel.so --program-id target/deploy/sol_duel-keypair.json
          
      - name: Run smoke tests
        run: |
          chmod +x deployment/scripts/smoke-test.sh
          ./deployment/scripts/smoke-test.sh dev

  deploy-staging:
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    runs-on: ubuntu-latest
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts-${{ github.run_number }}
          
      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Similar steps as dev but with staging configurations
          
  deploy-prod:
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'prod'
    runs-on: ubuntu-latest
    environment: production
    needs: deploy-staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Manual approval required
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ github.TOKEN }}
          approvers: ${{ secrets.PROD_APPROVERS }}
          minimum-approvals: 2
          
      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          # Production deployment steps with blue-green strategy

  notify:
    runs-on: ubuntu-latest
    needs: [deploy-dev, deploy-staging, deploy-prod]
    if: always()
    
    steps:
      - name: Notify Slack
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}