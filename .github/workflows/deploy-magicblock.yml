name: Deploy MagicBlock

on:
  push:
    branches: [main, develop]
    paths-ignore:
      - 'docs/**'
      - '*.md'
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      force_deploy:
        description: 'Force deployment even if tests fail'
        required: false
        type: boolean
        default: false

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: magicblock/bolt
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust-version: ['1.75', 'stable']
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust-version }}
          profile: minimal
          override: true
          components: rustfmt, clippy

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Run tests
        run: |
          cargo test --workspace --all-features
          cargo clippy -- -D warnings
          cargo fmt --all -- --check

      - name: Security audit
        uses: actions-rs/audit-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name != 'pull_request' || github.event.inputs.force_deploy == 'true'
    
    permissions:
      contents: read
      packages: write

    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/Dockerfile.bolt
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    
    environment:
      name: staging
      url: https://staging.magicblock.gg

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --region us-west-2 --name magicblock-staging

      - name: Deploy to staging
        run: |
          chmod +x scripts/deployment/deploy-all.sh
          ./scripts/deployment/deploy-all.sh staging ${{ needs.build.outputs.image-tag }}

      - name: Run health checks
        run: |
          kubectl wait --for=condition=ready pod -l app=magicblock-bolt -n staging --timeout=300s
          kubectl get pods -n staging
          
          # Test deployment health
          STAGING_URL=$(kubectl get service magicblock-lb -n staging -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
          curl -f "http://${STAGING_URL}/health" || exit 1

      - name: Run integration tests
        run: |
          npm install
          npm run test:integration:staging

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, deploy-staging]
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    
    environment:
      name: production
      url: https://magicblock.gg

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --region us-west-2 --name magicblock-production

      - name: Create deployment backup
        run: |
          kubectl get deployment magicblock-bolt -n production -o yaml > backup-deployment-$(date +%Y%m%d-%H%M%S).yaml

      - name: Deploy to production
        run: |
          chmod +x scripts/deployment/deploy-all.sh
          ./scripts/deployment/deploy-all.sh production ${{ needs.build.outputs.image-tag }}

      - name: Monitor rollout
        run: |
          kubectl rollout status deployment/magicblock-bolt -n production --timeout=600s
          
          # Verify deployment health
          kubectl wait --for=condition=ready pod -l app=magicblock-bolt -n production --timeout=300s
          
          # Test production health
          PROD_URL=$(kubectl get service magicblock-lb -n production -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
          for i in {1..10}; do
            if curl -f "http://${PROD_URL}/health"; then
              echo "Production health check passed"
              break
            fi
            if [ $i -eq 10 ]; then
              echo "Production health check failed after 10 attempts"
              exit 1
            fi
            sleep 30
          done

      - name: Rollback on failure
        if: failure()
        run: |
          kubectl rollout undo deployment/magicblock-bolt -n production
          kubectl rollout status deployment/magicblock-bolt -n production

      - name: Notify deployment
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
          fields: repo,message,commit,author,action,eventName,ref,workflow

  cleanup:
    name: Cleanup Resources
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
      - name: Clean up old images
        run: |
          # Keep only last 10 images
          echo "Cleaning up old container images..."
          # This would typically be handled by your container registry's retention policy