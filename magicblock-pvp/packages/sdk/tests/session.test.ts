/**\n * Session Management Tests\n */\n\nimport { Keypair } from '@solana/web3.js';\nimport { SessionManager } from '../src/session/session-manager';\nimport { SessionConfig } from '../src/types';\n\ndescribe('Session Manager', () => {\n  let sessionManager: SessionManager;\n  let config: SessionConfig;\n\n  beforeEach(() => {\n    config = {\n      maxDuration: 60000, // 1 minute for testing\n      gaslessTransactions: true,\n      autoRenew: false, // Disable for testing\n      batchSize: 5\n    };\n    \n    sessionManager = new SessionManager(config);\n  });\n\n  afterEach(() => {\n    // Clean up any active sessions\n    const activeSessions = sessionManager.getActiveSessions();\n    activeSessions.forEach(session => {\n      sessionManager.closeSession(session.id).catch(() => {});\n    });\n  });\n\n  test('should create session successfully', async () => {\n    const session = await sessionManager.createSession();\n    \n    expect(session.id).toBeDefined();\n    expect(session.publicKey).toBeDefined();\n    expect(session.isActive).toBe(true);\n    expect(session.createdAt).toBeGreaterThan(0);\n    expect(session.expiresAt).toBeGreaterThan(session.createdAt);\n    expect(session.gaslessTransactions).toBe(0);\n    expect(session.totalCost).toBe(0);\n  });\n\n  test('should create session with provided keypair', async () => {\n    const keypair = Keypair.generate();\n    const session = await sessionManager.createSession(keypair);\n    \n    expect(session.publicKey.toString()).toBe(keypair.publicKey.toString());\n  });\n\n  test('should get active session', async () => {\n    const session = await sessionManager.createSession();\n    const activeSession = sessionManager.getActiveSession();\n    \n    expect(activeSession).not.toBeNull();\n    expect(activeSession!.id).toBe(session.id);\n  });\n\n  test('should get session by id', async () => {\n    const session = await sessionManager.createSession();\n    const retrievedSession = sessionManager.getSession(session.id);\n    \n    expect(retrievedSession).not.toBeNull();\n    expect(retrievedSession!.id).toBe(session.id);\n  });\n\n  test('should extend session duration', async () => {\n    const session = await sessionManager.createSession();\n    const originalExpiry = session.expiresAt;\n    const additionalTime = 30000; // 30 seconds\n    \n    const extendedSession = await sessionManager.extendSession(session.id, additionalTime);\n    \n    expect(extendedSession.expiresAt).toBe(originalExpiry + additionalTime);\n  });\n\n  test('should close session', async () => {\n    const session = await sessionManager.createSession();\n    \n    await sessionManager.closeSession(session.id);\n    \n    const closedSession = sessionManager.getSession(session.id);\n    expect(closedSession!.isActive).toBe(false);\n    \n    const activeSession = sessionManager.getActiveSession();\n    expect(activeSession).toBeNull();\n  });\n\n  test('should record transaction', async () => {\n    const session = await sessionManager.createSession();\n    \n    sessionManager.recordTransaction(session.id, 100000, 0.001, 50, true);\n    \n    const updatedSession = sessionManager.getSession(session.id);\n    expect(updatedSession!.gaslessTransactions).toBe(1);\n    expect(updatedSession!.totalCost).toBe(0.001);\n    \n    const metrics = sessionManager.getSessionMetrics(session.id);\n    expect(metrics!.transactionsProcessed).toBe(1);\n    expect(metrics!.gasUsed).toBe(100000);\n    expect(metrics!.costInSOL).toBe(0.001);\n    expect(metrics!.averageLatency).toBe(50);\n    expect(metrics!.successRate).toBe(1);\n  });\n\n  test('should handle batch transaction recording', async () => {\n    const session = await sessionManager.createSession();\n    \n    const transactions = [\n      { gasUsed: 100000, cost: 0.001, latency: 50, success: true },\n      { gasUsed: 150000, cost: 0.0015, latency: 60, success: true },\n      { gasUsed: 120000, cost: 0.0012, latency: 55, success: false }\n    ];\n    \n    sessionManager.recordTransactionBatch(session.id, transactions);\n    \n    const updatedSession = sessionManager.getSession(session.id);\n    expect(updatedSession!.gaslessTransactions).toBe(2); // Only successful ones\n    expect(updatedSession!.totalCost).toBe(0.0037);\n    \n    const metrics = sessionManager.getSessionMetrics(session.id);\n    expect(metrics!.transactionsProcessed).toBe(3);\n    expect(metrics!.gasUsed).toBe(370000);\n    expect(metrics!.successRate).toBe(2/3);\n  });\n\n  test('should check if session needs renewal', async () => {\n    const session = await sessionManager.createSession();\n    \n    // Should not need renewal immediately\n    expect(sessionManager.needsRenewal(session.id, 50000)).toBe(false);\n    \n    // Should need renewal with very high threshold\n    expect(sessionManager.needsRenewal(session.id, 70000)).toBe(true);\n  });\n\n  test('should get session statistics', async () => {\n    const session1 = await sessionManager.createSession();\n    const session2 = await sessionManager.createSession();\n    \n    sessionManager.recordTransaction(session1.id, 100000, 0.001, 50, true);\n    sessionManager.recordTransaction(session2.id, 200000, 0.002, 60, true);\n    \n    const stats = sessionManager.getSessionStats();\n    \n    expect(stats.totalSessions).toBe(2);\n    expect(stats.activeSessions).toBe(2);\n    expect(stats.totalTransactions).toBe(2);\n    expect(stats.totalCost).toBe(0.003);\n  });\n\n  test('should export and import sessions', async () => {\n    const session = await sessionManager.createSession();\n    sessionManager.recordTransaction(session.id, 100000, 0.001, 50, true);\n    \n    const exportedData = sessionManager.exportSessions();\n    \n    const newSessionManager = new SessionManager(config);\n    newSessionManager.importSessions(exportedData);\n    \n    const importedSession = newSessionManager.getSession(session.id);\n    expect(importedSession).not.toBeNull();\n    expect(importedSession!.totalCost).toBe(0.001);\n    \n    const importedMetrics = newSessionManager.getSessionMetrics(session.id);\n    expect(importedMetrics!.transactionsProcessed).toBe(1);\n  });\n\n  test('should handle session expiration', (done) => {\n    const shortConfig = {\n      ...config,\n      maxDuration: 100 // 100ms for quick test\n    };\n    \n    const shortSessionManager = new SessionManager(shortConfig);\n    \n    shortSessionManager.on('session:expired', (sessionId) => {\n      const session = shortSessionManager.getSession(sessionId);\n      expect(session!.isActive).toBe(false);\n      done();\n    });\n    \n    shortSessionManager.createSession();\n  }, 1000);\n\n  test('should throw error for non-existent session operations', async () => {\n    await expect(sessionManager.extendSession('non-existent', 1000))\n      .rejects.toThrow('Session non-existent not found');\n    \n    await expect(sessionManager.closeSession('non-existent'))\n      .rejects.toThrow('Session non-existent not found');\n  });\n\n  test('should throw error for inactive session extension', async () => {\n    const session = await sessionManager.createSession();\n    await sessionManager.closeSession(session.id);\n    \n    await expect(sessionManager.extendSession(session.id, 1000))\n      .rejects.toThrow('is not active');\n  });\n});"