/**\n * TEE Attestation Tests\n */\n\nimport { TEEAttestationVerifier } from '../src/tee/attestation';\nimport { TEEAttestation } from '../src/types';\n\ndescribe('TEE Attestation Verification', () => {\n  let validAttestation: TEEAttestation;\n  let invalidAttestation: TEEAttestation;\n\n  beforeEach(() => {\n    validAttestation = {\n      vendor: 'intel-sgx',\n      quote: new Uint8Array(500), // Valid SGX quote size\n      signature: new Uint8Array(64),\n      certificate: new Uint8Array(100),\n      timestamp: Date.now(),\n      mrenclave: new Uint8Array(32),\n      mrsigner: new Uint8Array(32)\n    };\n    \n    // Fill with test data\n    validAttestation.quote.fill(1);\n    validAttestation.signature.fill(2);\n    validAttestation.certificate.fill(3);\n    validAttestation.mrenclave!.fill(4);\n    validAttestation.mrsigner!.fill(5);\n    \n    invalidAttestation = {\n      vendor: 'intel-sgx',\n      quote: new Uint8Array(100), // Too small for SGX\n      signature: new Uint8Array(32), // Too small\n      certificate: new Uint8Array(16), // Too small\n      timestamp: Date.now() - (10 * 60 * 1000) // 10 minutes old\n    };\n  });\n\n  test('should validate attestation format', () => {\n    expect(TEEAttestationVerifier.validateAttestationFormat(validAttestation)).toBe(true);\n    expect(TEEAttestationVerifier.validateAttestationFormat(invalidAttestation)).toBe(false);\n  });\n\n  test('should verify valid Intel SGX attestation', async () => {\n    const result = await TEEAttestationVerifier.verifyAttestation(validAttestation);\n    \n    expect(result.vendor).toBe('intel-sgx');\n    expect(result.timestamp).toBe(validAttestation.timestamp);\n    // Note: Actual verification will depend on implementation\n  });\n\n  test('should reject expired attestation', async () => {\n    const expiredAttestation = {\n      ...validAttestation,\n      timestamp: Date.now() - (10 * 60 * 1000) // 10 minutes ago\n    };\n    \n    const result = await TEEAttestationVerifier.verifyAttestation(expiredAttestation);\n    \n    expect(result.isValid).toBe(false);\n    expect(result.error).toContain('timestamp too old');\n  });\n\n  test('should handle AMD SEV attestation', async () => {\n    const sevAttestation: TEEAttestation = {\n      vendor: 'amd-sev',\n      quote: new Uint8Array(200),\n      signature: new Uint8Array(64),\n      certificate: new Uint8Array(100),\n      timestamp: Date.now(),\n      reportData: new Uint8Array(64)\n    };\n    \n    sevAttestation.quote.fill(1);\n    sevAttestation.signature.fill(2);\n    sevAttestation.certificate.fill(3);\n    sevAttestation.reportData!.fill(4);\n    \n    const result = await TEEAttestationVerifier.verifyAttestation(sevAttestation);\n    \n    expect(result.vendor).toBe('amd-sev');\n  });\n\n  test('should handle ARM TrustZone attestation', async () => {\n    const armAttestation: TEEAttestation = {\n      vendor: 'arm-trustzone',\n      quote: new Uint8Array(150),\n      signature: new Uint8Array(64),\n      certificate: new Uint8Array(80),\n      timestamp: Date.now()\n    };\n    \n    armAttestation.quote.fill(1);\n    armAttestation.signature.fill(2);\n    armAttestation.certificate.fill(3);\n    \n    const result = await TEEAttestationVerifier.verifyAttestation(armAttestation);\n    \n    expect(result.vendor).toBe('arm-trustzone');\n  });\n\n  test('should handle generic attestation', async () => {\n    const genericAttestation: TEEAttestation = {\n      vendor: 'generic',\n      quote: new Uint8Array(100),\n      signature: new Uint8Array(64),\n      certificate: new Uint8Array(50),\n      timestamp: Date.now()\n    };\n    \n    genericAttestation.quote.fill(1);\n    genericAttestation.signature.fill(2);\n    genericAttestation.certificate.fill(3);\n    \n    const result = await TEEAttestationVerifier.verifyAttestation(genericAttestation);\n    \n    expect(result.vendor).toBe('generic');\n  });\n\n  test('should reject unsupported vendor', async () => {\n    const unsupportedAttestation = {\n      ...validAttestation,\n      vendor: 'unsupported-tee' as any\n    };\n    \n    const result = await TEEAttestationVerifier.verifyAttestation(unsupportedAttestation);\n    \n    expect(result.isValid).toBe(false);\n    expect(result.error).toContain('Unsupported TEE vendor');\n  });\n\n  test('should extract measurement from attestation', () => {\n    const measurement = TEEAttestationVerifier.extractMeasurement(validAttestation);\n    \n    expect(measurement).toEqual(validAttestation.mrenclave);\n  });\n\n  test('should check attestation age', () => {\n    const age = TEEAttestationVerifier.getAttestationAge(validAttestation);\n    const isExpired = TEEAttestationVerifier.isAttestationExpired(validAttestation, 1000);\n    \n    expect(age).toBeGreaterThanOrEqual(0);\n    expect(isExpired).toBe(age > 1000);\n  });\n\n  test('should create test attestation', () => {\n    const testAttestation = TEEAttestationVerifier.createTestAttestation();\n    \n    expect(testAttestation.vendor).toBe('generic');\n    expect(testAttestation.quote.length).toBe(500);\n    expect(testAttestation.signature.length).toBe(64);\n    expect(testAttestation.certificate.length).toBe(100);\n    expect(testAttestation.timestamp).toBeGreaterThan(0);\n  });\n});"